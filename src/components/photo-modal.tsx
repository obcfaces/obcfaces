import { useState, useEffect, useRef } from "react";
import { X, ChevronLeft, ChevronRight, Heart, MessageCircle, Send } from "lucide-react";
import { Dialog, DialogContent } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";

interface Comment {
  id: number;
  author: string;
  text: string;
  timestamp: string;
}

interface PhotoModalProps {
  isOpen: boolean;
  onClose: () => void;
  photos: string[];
  currentIndex: number;
  contestantName: string;
  age?: number;
  weight?: number;
  height?: number;
  country?: string;
  city?: string;
}

export function PhotoModal({ isOpen, onClose, photos, currentIndex, contestantName, age, weight, height, country, city }: PhotoModalProps) {
  const [activeIndex, setActiveIndex] = useState(currentIndex);
  const [touchStart, setTouchStart] = useState<number | null>(null);
  const [touchEnd, setTouchEnd] = useState<number | null>(null);
  // Comments are always shown now
  const [commentText, setCommentText] = useState("");
  const [photoComments, setPhotoComments] = useState<Record<number, Comment[]>>({
    // –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    0: [
      {
        id: 1,
        author: "–ú–∞—Ä–∏—è_–ö",
        text: "–ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç! –û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤—ã–µ –≥–ª–∞–∑–∞",
        timestamp: "1 —á–∞—Å –Ω–∞–∑–∞–¥"
      },
      {
        id: 2,
        author: "Alex92",
        text: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ, –æ—Ç–ª–∏—á–Ω—ã–π —Ä–∞–∫—É—Ä—Å",
        timestamp: "3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
      },
      {
        id: 3,
        author: "–ï–ª–µ–Ω–∞_–ú–∏—Ä",
        text: "–í–∞—É! –¢–∞–∫–∞—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫—Ä–∞—Å–æ—Ç–∞! üòç",
        timestamp: "4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
      },
      {
        id: 4,
        author: "–î–º–∏—Ç—Ä–∏–π–§–æ—Ç–æ",
        text: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞, —Å–≤–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω",
        timestamp: "5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      },
      {
        id: 5,
        author: "–ê–Ω–Ω–∞2024",
        text: "–ü—Ä–æ—Å—Ç–æ –≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ! –û—á–µ–Ω—å —Å—Ç–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–∑",
        timestamp: "6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      },
      {
        id: 6,
        author: "–ú–∞–∫—Å–∏–º_–í",
        text: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—ä–µ–º–∫–∏ üëè",
        timestamp: "7 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      },
      {
        id: 7,
        author: "–ö–∞—Ç—è_style",
        text: "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∫—Ä–∞—Å–∏–≤—ã–µ –≥–ª–∞–∑–∞! –ó–∞–≤–æ—Ä–∞–∂–∏–≤–∞–µ—Ç",
        timestamp: "8 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      },
      {
        id: 8,
        author: "–ò–≥–æ—Ä—å–§–æ—Ç–æ–≥—Ä–∞—Ñ",
        text: "–û—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞",
        timestamp: "9 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      },
      {
        id: 9,
        author: "–õ–∏–∑–∞_–º–æ–¥–µ–ª—å",
        text: "–ö–∞–∫–∞—è –∂–µ —Ç—ã –∫—Ä–∞—Å–∏–≤–∞—è! –í–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å ‚ú®",
        timestamp: "10 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      },
      {
        id: 10,
        author: "–í–ª–∞–¥–∏–º–∏—Ä–ê—Ä—Ç",
        text: "–§–æ—Ç–æ –¥–æ—Å—Ç–æ–π–Ω–æ –∂—É—Ä–Ω–∞–ª—å–Ω–æ–π –æ–±–ª–æ–∂–∫–∏!",
        timestamp: "11 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      },
      {
        id: 11,
        author: "–°–æ—Ñ–∏—è_beauty",
        text: "–û–±–æ–∂–∞—é —Ç–∞–∫–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤",
        timestamp: "12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      },
      {
        id: 12,
        author: "–ê—Ä—Ç–µ–º–°—Ç–∏–ª—å",
        text: "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–≤–µ—Ç–∞ –∏ —Ç–µ–Ω–∏",
        timestamp: "13 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      }
    ],
    1: [
      {
        id: 13,
        author: "–°–≤–µ—Ç–ª–∞–Ω–∞",
        text: "–ò–¥–µ–∞–ª—å–Ω–∞—è —Ñ–∏–≥—É—Ä–∞! üëç",
        timestamp: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
      },
      {
        id: 14,
        author: "–ú–∏—Ö–∞–∏–ª_—Å–ø–æ—Ä—Ç",
        text: "–í–∏–¥–Ω–æ —á—Ç–æ –º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞–¥ —Å–æ–±–æ–π! –†–µ—Å–ø–µ–∫—Ç",
        timestamp: "3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
      },
      {
        id: 15,
        author: "–ö—Ä–∏—Å—Ç–∏–Ω–∞_—Ñ–∏—Ç–Ω–µ—Å",
        text: "–ö–∞–∫–∞—è –∂–µ —Ç—ã —Å—Ç—Ä–æ–π–Ω–∞—è! –ü–æ–¥–µ–ª–∏—Å—å —Å–µ–∫—Ä–µ—Ç–æ–º üí™",
        timestamp: "4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
      },
      {
        id: 16,
        author: "–û–ª–µ–≥–¢—Ä–µ–Ω–µ—Ä",
        text: "–û—Ç–ª–∏—á–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞! –ú–æ—Ç–∏–≤–∏—Ä—É–µ—à—å",
        timestamp: "5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      },
      {
        id: 17,
        author: "–ù–∞—Ç–∞—à–∞_–∑–¥–æ—Ä–æ–≤—å–µ",
        text: "–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ñ–∏–≥—É—Ä–∞! –Ø–≤–Ω–æ –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Å–ø–æ—Ä—Ç–æ–º",
        timestamp: "6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      },
      {
        id: 18,
        author: "–î–µ–Ω–∏—Å–°–ø–æ—Ä—Ç",
        text: "–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –ø—Ä–∏–º–µ—Ä! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å üî•",
        timestamp: "7 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      },
      {
        id: 19,
        author: "–ê–ª–∏–Ω–∞_–π–æ–≥–∞",
        text: "–ì–∞—Ä–º–æ–Ω–∏—è –∏ –∫—Ä–∞—Å–æ—Ç–∞ –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ç–æ ‚ú®",
        timestamp: "8 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      },
      {
        id: 20,
        author: "–†–æ–º–∞–Ω–§–∏—Ç",
        text: "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—è–∂–µ–ª–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ —Å–æ–±–æ–π!",
        timestamp: "9 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      }
    ],
    2: [
      {
        id: 21,
        author: "–í–∏–∫—Ç–æ—Ä–∏—è–°—Ç–∏–ª—å",
        text: "–û–±–æ–∂–∞—é —Ç–∞–∫–∏–µ —Ñ–æ—Ç–æ! –û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–æ",
        timestamp: "1 —á–∞—Å –Ω–∞–∑–∞–¥"
      },
      {
        id: 22,
        author: "–ê–Ω–¥—Ä–µ–π–ê—Ä—Ç",
        text: "–û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ! –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        timestamp: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
      },
      {
        id: 23,
        author: "–Æ–ª–∏—è_–º–æ–¥–Ω–∏—Ü–∞",
        text: "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–∑! –ì–¥–µ —Ç–∞–∫–æ–π –Ω–∞—Ä—è–¥?",
        timestamp: "3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
      },
      {
        id: 24,
        author: "–°–µ—Ä–≥–µ–π–î–∏–∑–∞–π–Ω",
        text: "–§–æ—Ç–æ –∫–∞–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞ üé®",
        timestamp: "4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
      },
      {
        id: 25,
        author: "–ú–∞—à–∞_creative",
        text: "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –Ω–∞ —Ñ–æ—Ç–æ!",
        timestamp: "5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
      }
    ]
  });
  const [photoLikes, setPhotoLikes] = useState<Record<number, { count: number; isLiked: boolean }>>({
    0: { count: 23, isLiked: false },
    1: { count: 18, isLiked: false },
    2: { count: 15, isLiked: false }
  });
  const { toast } = useToast();

  // Refs for focusing comment input and scrolling
  const commentsListRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // Reset activeIndex when currentIndex changes
  useEffect(() => {
    setActiveIndex(currentIndex);
  }, [currentIndex]);

  const nextPhoto = () => {
    setActiveIndex((prev) => (prev + 1) % photos.length);
  };

  const prevPhoto = () => {
    setActiveIndex((prev) => (prev - 1 + photos.length) % photos.length);
  };

  const handleLike = () => {
    setPhotoLikes(prev => ({
      ...prev,
      [activeIndex]: {
        count: prev[activeIndex]?.isLiked ? (prev[activeIndex]?.count || 0) - 1 : (prev[activeIndex]?.count || 0) + 1,
        isLiked: !prev[activeIndex]?.isLiked
      }
    }));
  };

  const handleCommentSubmit = () => {
    if (commentText.trim()) {
      const newComment: Comment = {
        id: Date.now(),
        author: "–í—ã",
        text: commentText.trim(),
        timestamp: "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
      };
      setPhotoComments(prev => ({
        ...prev,
        [activeIndex]: [newComment, ...(prev[activeIndex] || [])]
      }));
      setCommentText("");
      toast({
        title: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω",
        description: "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω",
      });
    }
  };

  const focusCommentInput = () => {
    textareaRef.current?.focus();
    // Ensure comments panel is scrolled to the latest position
    if (commentsListRef.current) {
      commentsListRef.current.scrollTo({
        top: commentsListRef.current.scrollHeight,
        behavior: "smooth",
      });
    }
  };

  // Touch handlers for swipe functionality
  const onTouchStart = (e: React.TouchEvent) => {
    setTouchEnd(null);
    setTouchStart(e.targetTouches[0].clientX);
  };

  const onTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const onTouchEnd = () => {
    if (!touchStart || !touchEnd) return;
    
    const distance = touchStart - touchEnd;
    const minSwipeDistance = 50;

    if (distance > minSwipeDistance) {
      // Swipe left - next photo
      nextPhoto();
    } else if (distance < -minSwipeDistance) {
      // Swipe right - previous photo  
      prevPhoto();
    }
  };

  const currentPhotoComments = photoComments[activeIndex] || [];
  const currentPhotoLikes = photoLikes[activeIndex] || { count: Math.floor(Math.random() * 30) + 5, isLiked: false };

  // Ensure all photos have like data
  if (!photoLikes[activeIndex]) {
    setPhotoLikes(prev => ({
      ...prev,
      [activeIndex]: { count: Math.floor(Math.random() * 30) + 5, isLiked: false }
    }));
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="fixed inset-0 left-0 top-0 translate-x-0 translate-y-0 w-screen max-w-none h-dvh overflow-hidden p-0 bg-black/90">
        {/* Desktop: flex layout, Mobile: block layout */}
        <div className="h-full flex flex-col">
          {/* Photo section */}
          <div className={cn(
            "relative flex items-start justify-center transition-all duration-300 pt-2 md:pt-4",
            "w-full h-[60dvh]"
          )}>

          {photos.length > 1 && (
            <>
              <button
                onClick={prevPhoto}
                className="absolute left-4 top-1/2 -translate-y-1/2 z-50 text-white hover:text-white/90 transition-colors w-12 h-12 rounded-full bg-black/50 hover:bg-black/70 backdrop-blur flex items-center justify-center"
                aria-label="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ"
              >
                <ChevronLeft className="w-7 h-7" />
              </button>
              <button
                onClick={nextPhoto}
                className="absolute right-4 top-1/2 -translate-y-1/2 z-50 text-white hover:text-white/90 transition-colors w-12 h-12 rounded-full bg-black/50 hover:bg-black/70 backdrop-blur flex items-center justify-center"
                aria-label="–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ"
              >
                <ChevronRight className="w-7 h-7" />
              </button>
            </>
          )}

          <img
            src={photos[activeIndex]}
            alt={`${contestantName} photo ${activeIndex + 1}`}
            className="w-full max-w-full max-h-full object-contain self-start"
            onTouchStart={onTouchStart}
            onTouchMove={onTouchMove}
            onTouchEnd={onTouchEnd}
          />

          {/* actions moved to header */}

          <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white text-sm bg-black/50 px-3 py-1 rounded">
            {activeIndex + 1} / {photos.length}
          </div>

          {photos.length > 1 && (
            <div className="absolute bottom-4 right-4 flex gap-1">
              {photos.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setActiveIndex(index)}
                  className={`w-2 h-2 rounded-full transition-colors ${
                    index === activeIndex ? "bg-white" : "bg-white/50"
                  }`}
                />
              ))}
            </div>
          )}
        </div>

        {/* Comments section - Desktop: sidebar, Mobile: bottom panel */}
        <div className={cn(
          "bg-background relative flex flex-col",
          "h-[40dvh]"
        )}>
            <div className="p-4 border-b">
              <div className="flex items-start justify-between gap-3">
                <div className="min-w-0">
                  <div className="font-semibold truncate">
                    {contestantName}
                    {age ? ` ¬∑ ${age}` : ""}
                    {weight ? ` ¬∑ ${weight} –∫–≥` : ""}
                    {height ? ` ¬∑ ${height} —Å–º` : ""}
                  </div>
                  <div className="text-sm text-contest-blue truncate">
                    {(country || "")}
                    {(country && city) ? " ¬∑ " : ""}
                    {(city || "")}
                  </div>
                </div>
                <div className="flex items-center gap-2 shrink-0">
                  <Button
                    variant="ghost"
                    size="sm"
                    className={cn(currentPhotoLikes.isLiked && "text-red-400")}
                    onClick={handleLike}
                    aria-label="–ù—Ä–∞–≤–∏—Ç—Å—è"
                  >
                    <Heart className={cn("w-4 h-4 mr-1", currentPhotoLikes.isLiked && "fill-current")} />
                    {currentPhotoLikes.count}
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={focusCommentInput}
                    aria-label="–û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
                  >
                    <MessageCircle className="w-4 h-4 mr-1" />
                    {currentPhotoComments.length}
                  </Button>
                </div>
              </div>
            </div>

            <div ref={commentsListRef} className="flex-1 overflow-y-auto p-4 pb-24 md:pb-28 space-y-3 min-h-0">
              {currentPhotoComments.length === 0 ? (
                <p className="text-center text-muted-foreground text-sm">
                  –ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                </p>
              ) : (
                currentPhotoComments.map((comment) => (
                  <div key={comment.id} className="space-y-1">
                    <div className="flex justify-between items-start">
                      <span className="font-medium text-sm">{comment.author}</span>
                      <span className="text-xs text-muted-foreground">{comment.timestamp}</span>
                    </div>
                    <p className="text-sm">{comment.text}</p>
                  </div>
                ))
              )}
            </div>

            <div className="sticky bottom-0 left-0 right-0 p-3 md:p-4 border-t space-y-2 md:space-y-3 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/80 pb-[env(safe-area-inset-bottom)]">
              <Textarea
                ref={textareaRef}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏..."
                value={commentText}
                onChange={(e) => setCommentText(e.target.value)}
                className="min-h-[50px] md:min-h-[60px] resize-none text-base md:text-sm"
                aria-label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
              />
              <Button
                onClick={handleCommentSubmit}
                disabled={!commentText.trim()}
                className="w-full"
                size="sm"
              >
                <Send className="w-4 h-4 mr-2" />
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
              </Button>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}